<div class="container-fluid">
    <h1>Carrito de Compras</h1>
    {{#if productos.length}}
        <div class="row">
            {{#each productos}}
                <div class="col-lg-4 col-md-6 col-sm-12 mb-4" id="producto-{{this.producto_id}}" data-precio="{{this.precio}}" data-cantidad="{{this.cantidad}}">
                    <div class="card h-100 position-relative">
                        <img src="{{this.imagen}}" class="card-img-top" alt="{{this.nombre}}">

                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title">{{this.nombre}}</h5>
                            <p class="card-text">Precio: ${{this.precio}} CLP</p>
                            <p class="card-text">Cantidad: {{this.cantidad}}</p>
                            <button class="btn btn-danger eliminar-producto" 
                                    data-product-id="{{this.producto_id}}" 
                                    data-compra-id="{{this.id_compra}}">Eliminar</button>
                        </div>
                    </div>
                </div>
            {{/each}}
        </div>

        <div class="total-compra mt-4">
            <h3 class="text-white">Total a Pagar: $<span id="total">{{total}}</span> CLP</h3>
            <button class="btn btn-success pagar">Pagar</button>
        </div>

        <!-- Mensajes de éxito o error -->
        <div id="mensaje-error" class="alert alert-danger d-none mt-4" role="alert">
            Saldo insuficiente.
        </div>
        <div id="mensaje-exito" class="alert alert-success d-none mt-4" role="alert">
            Compra realizada con éxito.
        </div>

    {{else}}
        <h1>No hay productos en tu carrito.</h1>
    {{/if}}
</div>

<script>
    // Función para calcular el total a pagar
    function recalcularTotal() {
        let total = 0;
        document.querySelectorAll('.col-lg-4').forEach(producto => {
            const precio = parseFloat(producto.getAttribute('data-precio'));
            const cantidad = parseInt(producto.getAttribute('data-cantidad'));
            total += precio * cantidad;
        });

        // Actualizar el total en la interfaz con formato de miles y sin decimales
        document.getElementById('total').textContent = total.toLocaleString('de-DE', {
            minimumFractionDigits: 0,
            maximumFractionDigits: 0
        });
    }

    // Función para eliminar producto de la vista y la base de datos
    document.querySelectorAll('.eliminar-producto').forEach(boton => {
        boton.addEventListener('click', function() {
            const productId = this.getAttribute('data-product-id');
            const productElement = this.closest('.col-lg-4');

            console.log('Producto ID a eliminar:', productId);

            // Eliminar el producto de la vista
            productElement.remove();

            // Recalcular el total
            recalcularTotal();

            // Enviar solicitud al backend para eliminar el producto de la base de datos
            fetch('/eliminar-producto', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    producto_id: productId
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert("Producto eliminado correctamente.");
                } else {
                    alert("Error al eliminar el producto: " + data.message);
                }
            })
            .catch(error => {
                console.error("Error eliminando producto:", error);
                alert("Error al eliminar el producto.");
            });
        });
    });

    // Función para pagar
    document.querySelector('.pagar').addEventListener('click', function() {
        const total = parseFloat(document.getElementById('total').textContent.replace(/,/g, ''));
        const productos = [];

        document.querySelectorAll('.col-lg-4').forEach(producto => {
            const productoId = producto.getAttribute('data-product-id');
            const nombreProducto = producto.querySelector('.card-title').textContent;
            const imagenProducto = producto.querySelector('.card-img-top').src;
            const precio = parseFloat(producto.getAttribute('data-precio'));
            const cantidad = parseInt(producto.getAttribute('data-cantidad')); // Obtener la cantidad

            productos.push({
                producto_id: productoId,
                nombre_producto: nombreProducto,
                imagen_producto: imagenProducto,
                precio: precio,
                cantidad: cantidad // Incluir la cantidad en el objeto del producto
            });
        });

        // Enviar solicitud para procesar el pago
        fetch('/pagar', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ productos }) // Enviar productos con la cantidad
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                document.getElementById('mensaje-exito').classList.remove('d-none'); // Mostrar mensaje de éxito
                window.location.href = '/'; // Redirigir a la página principal
            } else {
                // Mostrar mensaje de error
                document.getElementById('mensaje-error').textContent = data.message;
                document.getElementById('mensaje-error').classList.remove('d-none');
            }
        })
        .catch(error => {
            console.error("Error al procesar el pago:", error);
            alert("Error al procesar el pago.");
        });
    });

    // Inicializar el cálculo del total cuando se carga la página
    recalcularTotal();
</script>
